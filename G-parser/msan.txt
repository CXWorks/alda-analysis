address := pointer
size_ := int64
labels := int64

value := int8
num := int64
flag := int8
length := int32


addr2Label = universe::map(address, value)
addr2size = map(address, size_)

onlibc_read(address addr, size_ si) {
    alda_assert( addr2Label.get( addr, si ), 0 ) ;
}

onlibc_write(address addr, size_ si){
    addr2Label.set(addr, 0, si);
}

insert after LibcRead call onlibc_read


insert after LibcWrite call onlibc_write


onMalloc(address addr, size_ si){

    addr2Label.add_range(addr, -1, si);
    addr2size[addr] = si;
}

onRealloc(address res, address addr, size_ a){

    if(res!=addr){
        addr2Label.cpy_range(res, addr, a);
        addr2size[addr]=0;
        addr2size[res]=a;
    }else {
        if(a > addr2size[addr]){
            addr2Label.add_range(ptr_offset(addr, addr2size[addr]), 0, a-addr2size[addr]);
        }
        addr2size[res]=a;
    }
}

onCalloc(address addr, size_ num, size_ si){

    addr2Label.add_range(addr, 0, si * num);
    addr2size[addr] = si * num;
}

onFree(address addr){

    if(addr2size[addr]){
        addr2Label.add_range(addr, -1, addr2size[addr]);
        addr2size[addr]=0;
    }
}

insert after func free call onFree($1)

onAlloca(address addr, num si){
    addr2Label.add_range(addr, -1, si);
}

onMemSet(address addr, size_ si){
    addr2Label.add_range(addr, 0, si);
}

onMemCpy(address addr1, address addr2, size_ si){
    addr2Label.cpy_range(addr1, addr2, si);
}

onMemMove(address addr1, address addr2, size_ si) {
    addr2Label.move_range(addr1, addr2, si);
}

labels onLoad(address addr, num n){

    return addr2Label.get(addr, n);
}

onStore(labels l1, address addr, num n) {
    addr2Label.set(addr, l1, n);
}

labels onOrOp(labels l1, labels l2) {
    return l1|l2;
}


labels onBinaryOps(labels l1, labels l2) {
        return l1 | l2;
}

insert after BinaryOperator call onBinaryOps($1.m, $2.m)

labels onAndInst(labels l1, labels l2, length n1, length n2) {
        return (l1 & l2) | (n1 & l2) | (l1 & n2);
}

insert after AndInst call onAndInst($1.m, $2.m, $1, $2)

labels onOrInst(labels l1, labels l2, length n1, length n2) {
        return (l1 & l2) | (~n1 & l2) | (l1 & ~n2);
}

insert after OrInst call onOrInst($1.m, $2.m, $1, $2)


labels onShrInst(labels l1, labels l2, length n2) {
        if(l2 == 0){
            return l1 >> n2;
        }else
            return l2;
}

insert after LShrInst call onShrInst($1.m, $2.m, $2)

insert after AShrInst call onShrInst($1.m, $2.m, $2)

labels onShlInst(labels l1, labels l2, length n2) {
        if(l2 == 0){
            return l1 << n2;
        }else
            return l2;
}

insert after ShlInst call onShlInst($1.m, $2.m, $2)

labels onDivInst(labels l1) {
    return l1;
}

insert after UDivInst call onDivInst($1.m)

insert after SDivInst call onDivInst($1.m)

insert after FDivInst call onDivInst($1.m)

insert after URemInst call onDivInst($1.m)

insert after SRemInst call onDivInst($1.m)

insert after FRemInst call onDivInst($1.m)

labels onAggregateOp(labels l1, labels l2){
    return l1|l2;
}

labels onShuffleOp(labels l1, labels l2, labels l3){
    return l1|l2|l3;
}

labels onSelectInst(flag f,labels lf, labels l1, labels l2){
alda_assert( lf, 0 ) ;
    if(f)
    return l1;
    else
    return l2;
}

labels onCast(labels l1){
    return l1;
}

labels onCheck2(labels l1, labels l2) {

    return l1|l2;
}

labels onGetElement(labels l1, labels l2, labels l3, labels l4, labels l5, labels l6, labels l7, labels l8, labels l9, labels l10, labels l11, labels l12) {
    return l1|l2|l3|l4|l5|l6|l7|l8|l9|l10|l11|l12;
}

insert after func mmap call onMemSet($r, $2)

insert after func malloc call onMalloc($r, $1)

insert after func calloc call onCalloc($r, $1, $2)

insert after func realloc call onRealloc($r, $1, $2)

insert after AllocaInst call onAlloca($r, sizeof($r))

insert before  MemSetInst call onMemSet($1, $3)

insert before  MemCpyInst call onMemCpy($1, $2, $3)

insert before  MemMoveInst call onMemMove($1, $2, $3)

insert after LoadInst call onLoad($1, sizeof($r))

insert after SelectInst call onSelectInst($1, $1.m, $2.m, $3.m)

insert after CastInst call onCast($1.m)

insert after GetElementPtrInst call onGetElement($p.m)

insert after ExtractValueInst call onCast($1.m)

insert after ExtractElementInst call onOrOp($1.m, $2.m)

insert after InsertElementInst call onOrOp($1.m, $2.m)

insert after InsertValueInst call onOrOp($1.m, $2.m)

insert after ShuffleVectorInst call onShuffleOp($1.m, $2.m, $3.m)

insert after StoreInst call onStore($1.m, $2, sizeof($1))

insert before CmpInst call onCheck2($1.m, $2.m)


onBranch(labels l1, labels l2, labels l3) {
    alda_assert( l1, 0 ) ;
}

insert before BranchInst call onBranch($p.m)

#include "libc_alda_common.txt"