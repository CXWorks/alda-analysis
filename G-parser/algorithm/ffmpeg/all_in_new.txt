tid := threadid : 64
address := pointer : sync
lid := lockid : 512
status := int16
size := int64
fork_id := threadid : 64
hstatus := int16
rstatus := int16
wstatus := int16
location := pointer
labels := int64
epoch := int16
flag := int8

thread2WLock = universe::map(tid, set(lid))
thread2Lock = universe::map(fork_id, set(lid))
addr2Lock = universe::map(address, universe::set(lid))
addr2Thread = universe::map(address, set(tid))
addr2type = universe::map(address, status)
addr2size = map(address, size)


C = map(tid, map(tid, hstatus))
L = map(lid, map(tid, hstatus))
R = universe::map(address, map(tid, rstatus))
W = universe::map(address, wstatus)
RE = universe::map(address, epoch)

addr2Label = universe::map(address, labels)
addr2used = universe::map(location, flag)


labels onCast(labels l1) {
    return l1;
}

labels onBinaryOp(labels l1, labels l2) {
    return l1|l2;
}

labels onGetElement(labels l1, labels l2, labels l3, labels l4, labels l5, labels l6, labels l7, labels l8, labels l9, labels l10, labels l11) {
    return l1|l2|l3|l4|l5|l6|l7|l8|l9|l10|l11;
}


onLock(tid t, lid l) {
thread2WLock[t].add(l);
thread2Lock[t].add(l);
C[t] |= L[l];
}
onUnlock(tid t, lid l) {
    thread2WLock[t].remove(l);
    thread2Lock[t].remove(l);
    L[l] = C[t];
    C[t][t]++;
}

onRLock(tid t, lid l) {
    thread2Lock[t].add(l);
    C[t] |= L[l];
}

labels onLoad(address addr, tid t, size n) {

    if(!addr2Thread[addr].find(t) && addr2type[addr] != 0){
            if(addr2type[addr] == 1){
                addr2type[addr] = 2;

            }
            addr2Thread[addr].add(t);

    }
    if(RE[addr] > 0){
        if(t==RE[addr]){
            if(R[addr][t] != C[t][t] && R[addr][t] <= C[t][t] && W[addr] <= C[t][t])
                R[addr][t] = C[t][t];
        }else{
            if(W[addr] <= C[t][t]){
                R[addr][t] = C[t][t];
                R[addr][RE[addr]] = C[t][t];
                RE[addr]=-1;
            }
        }
    }else if(RE[addr]==-1){
        if(W[addr] <= C[t][t])
            R[addr][t] = C[t][t];
    }else {
        RE[addr] = t;
    }

    if(addr2type[addr] > 1){
        addr2Lock[addr] = addr2Lock[addr] & thread2Lock[t];
    }
    alda_assert(addr2used.get(addr, n) , 0);
    return addr2Label[addr];
}

onStore(address addr, labels l1, tid t, size n) {
addr2Label[addr] = l1;
if(!addr2Thread[addr].find(t)){
    addr2Thread[addr].add(t);

    if(addr2type[addr] == 2){
        addr2type[addr] = 3;
    }
    if(addr2type[addr] == 1){
         addr2type[addr] = 3;
    }
    if(addr2type[addr] == 0){
         addr2type[addr] = 1;
    }
}else {

    if(addr2type[addr] == 2){
       addr2type[addr] = 3;

    }
}
if(addr2type[addr] > 1){
    addr2Lock[addr] = addr2Lock[addr] & thread2WLock[t] ;
}
    if(RE[addr] == 0){
        if(R[addr][t] <= C[t][t] && W[addr] != C[t][t] && W[addr] <= C[t][t])
                    W[addr] = C[t][t];
    }else if(RE[addr]==-1){
        if(W[addr] <= C[t][t] && R[addr] <= C[t]){
            W[addr] = C[t][t];
            R[addr][t] = 0;
            RE[addr] = 0;
        }
    }else {
        RE[addr] = t;
    }
    alda_assert(addr2used.get(addr, n) , 0);
}

onMalloc(address addr, size m) {
    addr2size[addr] = m;
    addr2used.set(addr, 0, m);
}

onFree(address addr) {
    addr2Lock.remove_range(addr, addr2size[addr]);
    addr2Thread.remove_range(addr, addr2size[addr]);
    addr2type.remove_range(addr, addr2size[addr]);
    addr2size.remove(addr);
    addr2used.set(addr, -1, addr2size[addr]);
}

onCreate(tid t, fork_id f) {
C[f] |= C[t];
C[t][t]++;
}

onDestroy(tid t, fork_id f) {
C[t] |= C[f];
C[f][f]++;
}

onWrite(address addr, size si) {
    alda_assert(addr2Label.check_range(addr, si, 0), 1);
}

onRead(address addr, size si) {
    addr2Label.set_range(addr, -1, si);
}

insert after func write call onWrite($2, $r)

insert after func read call onRead($2, $r)

insert after func pthread_mutex_lock call onLock($t, $1)

insert before func pthread_mutex_unlock call onUnlock($t, $1)

insert after func pthread_rwlock_wrlock call onLock($t, $1)

insert before func pthread_rwlock_unlock call onUnlock($t, $1)

insert after func pthread_rwlock_rdlock call onRLock($t, $1)

insert after func malloc call onMalloc($r, $1)

insert before func free call onFree($1)

insert after LoadInst call onLoad($1, $t, sizeof($r))

insert before CastInst call onCast($1.m)

insert after StoreInst call onStore($2, $1.m, $t, sizeof($1))

insert after func pthread_create call onCreate($t, $1)

insert after func pthread_join call onDestroy($t, $1)

insert after GetElementPtrInst call onGetElement($p.m)

insert after BinaryOperator call onBinaryOp($1.m, $2.m)